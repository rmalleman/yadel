// generated by Proto2Typescript. do not touch!

declare module org.roylance.yadel {
	interface ProtoBufModel {
		toArrayBuffer(): ArrayBuffer;
		//toBuffer(): NodeBuffer;
		//encode(): ByteBuffer;
		toBase64(): string;
		toString(): string;
	}

	export interface ProtoBufBuilder {
		UIRequest: UIRequestBuilder;
		UIResponse: UIResponseBuilder;
		UIDagReport: UIDagReportBuilder;
		UIDag: UIDagBuilder;
		UIEdge: UIEdgeBuilder;
		UINode: UINodeBuilder;
		UIWorkerConfiguration: UIWorkerConfigurationBuilder;
		UIRequests: UIRequests;
		UIWorkerState: UIWorkerState;
		
	}
}

declare module org.roylance.yadel {

	export interface UIRequest extends ProtoBufModel {
		request_type?: UIRequests;
		getRequestType() : UIRequests;
		setRequestType(requestType : UIRequests): void;
		dag_id?: string;
		getDagId() : string;
		setDagId(dagId : string): void;
		
	}
	
	export interface UIRequestBuilder {
		new(): UIRequest;
		decode(buffer: ArrayBuffer) : UIRequest;
		//decode(buffer: NodeBuffer) : UIRequest;
		//decode(buffer: ByteArrayBuffer) : UIRequest;
		decode64(buffer: string) : UIRequest;
		
	}	
}

declare module org.roylance.yadel {

	export interface UIResponse extends ProtoBufModel {
		content?: string;
		getContent() : string;
		setContent(content : string): void;
		report?: UIDagReport;
		getReport() : UIDagReport;
		setReport(report : UIDagReport): void;
		dag?: UIDag;
		getDag() : UIDag;
		setDag(dag : UIDag): void;
		configurations: UIWorkerConfiguration[];
		getConfigurations() : UIWorkerConfiguration[];
		setConfigurations(configurations : UIWorkerConfiguration[]): void;
		
	}
	
	export interface UIResponseBuilder {
		new(): UIResponse;
		decode(buffer: ArrayBuffer) : UIResponse;
		//decode(buffer: NodeBuffer) : UIResponse;
		//decode(buffer: ByteArrayBuffer) : UIResponse;
		decode64(buffer: string) : UIResponse;
		
	}	
}

declare module org.roylance.yadel {

	export interface UIDagReport extends ProtoBufModel {
		workers: UIWorkerConfiguration[];
		getWorkers() : UIWorkerConfiguration[];
		setWorkers(workers : UIWorkerConfiguration[]): void;
		dags: UIDag[];
		getDags() : UIDag[];
		setDags(dags : UIDag[]): void;
		
	}
	
	export interface UIDagReportBuilder {
		new(): UIDagReport;
		decode(buffer: ArrayBuffer) : UIDagReport;
		//decode(buffer: NodeBuffer) : UIDagReport;
		//decode(buffer: ByteArrayBuffer) : UIDagReport;
		decode64(buffer: string) : UIDagReport;
		
	}	
}

declare module org.roylance.yadel {

	export interface UIDag extends ProtoBufModel {
		id?: string;
		getId() : string;
		setId(id : string): void;
		display?: string;
		getDisplay() : string;
		setDisplay(display : string): void;
		nodes: UINode[];
		getNodes() : UINode[];
		setNodes(nodes : UINode[]): void;
		edges: UIEdge[];
		getEdges() : UIEdge[];
		setEdges(edges : UIEdge[]): void;
		is_completed?: boolean;
		getIsCompleted() : boolean;
		setIsCompleted(isCompleted : boolean): void;
		is_processing?: boolean;
		getIsProcessing() : boolean;
		setIsProcessing(isProcessing : boolean): void;
		is_error?: boolean;
		getIsError() : boolean;
		setIsError(isError : boolean): void;
		logs: string[];
		getLogs() : string[];
		setLogs(logs : string[]): void;
		number_completed?: number;
		getNumberCompleted() : number;
		setNumberCompleted(numberCompleted : number): void;
		number_processing?: number;
		getNumberProcessing() : number;
		setNumberProcessing(numberProcessing : number): void;
		number_errored?: number;
		getNumberErrored() : number;
		setNumberErrored(numberErrored : number): void;
		number_unprocessed?: number;
		getNumberUnprocessed() : number;
		setNumberUnprocessed(numberUnprocessed : number): void;
		
	}
	
	export interface UIDagBuilder {
		new(): UIDag;
		decode(buffer: ArrayBuffer) : UIDag;
		//decode(buffer: NodeBuffer) : UIDag;
		//decode(buffer: ByteArrayBuffer) : UIDag;
		decode64(buffer: string) : UIDag;
		
	}	
}

declare module org.roylance.yadel {

	export interface UIEdge extends ProtoBufModel {
		node_id_1?: string;
		getNodeId_1() : string;
		setNodeId_1(nodeId_1 : string): void;
		node_id_2?: string;
		getNodeId_2() : string;
		setNodeId_2(nodeId_2 : string): void;
		
	}
	
	export interface UIEdgeBuilder {
		new(): UIEdge;
		decode(buffer: ArrayBuffer) : UIEdge;
		//decode(buffer: NodeBuffer) : UIEdge;
		//decode(buffer: ByteArrayBuffer) : UIEdge;
		decode64(buffer: string) : UIEdge;
		
	}	
}

declare module org.roylance.yadel {

	export interface UINode extends ProtoBufModel {
		id?: string;
		getId() : string;
		setId(id : string): void;
		display?: string;
		getDisplay() : string;
		setDisplay(display : string): void;
		execution_date?: number;
		getExecutionDate() : number;
		setExecutionDate(executionDate : number): void;
		start_date?: number;
		getStartDate() : number;
		setStartDate(startDate : number): void;
		end_date?: number;
		getEndDate() : number;
		setEndDate(endDate : number): void;
		duration?: number;
		getDuration() : number;
		setDuration(duration : number): void;
		is_completed?: boolean;
		getIsCompleted() : boolean;
		setIsCompleted(isCompleted : boolean): void;
		is_processing?: boolean;
		getIsProcessing() : boolean;
		setIsProcessing(isProcessing : boolean): void;
		is_error?: boolean;
		getIsError() : boolean;
		setIsError(isError : boolean): void;
		logs: string[];
		getLogs() : string[];
		setLogs(logs : string[]): void;
		
	}
	
	export interface UINodeBuilder {
		new(): UINode;
		decode(buffer: ArrayBuffer) : UINode;
		//decode(buffer: NodeBuffer) : UINode;
		//decode(buffer: ByteArrayBuffer) : UINode;
		decode64(buffer: string) : UINode;
		
	}	
}

declare module org.roylance.yadel {

	export interface UIWorkerConfiguration extends ProtoBufModel {
		ip?: string;
		getIp() : string;
		setIp(ip : string): void;
		port?: string;
		getPort() : string;
		setPort(port : string): void;
		host?: string;
		getHost() : string;
		setHost(host : string): void;
		initialized_time?: number;
		getInitializedTime() : number;
		setInitializedTime(initializedTime : number): void;
		state?: UIWorkerState;
		getState() : UIWorkerState;
		setState(state : UIWorkerState): void;
		
	}
	
	export interface UIWorkerConfigurationBuilder {
		new(): UIWorkerConfiguration;
		decode(buffer: ArrayBuffer) : UIWorkerConfiguration;
		//decode(buffer: NodeBuffer) : UIWorkerConfiguration;
		//decode(buffer: ByteArrayBuffer) : UIWorkerConfiguration;
		decode64(buffer: string) : UIWorkerConfiguration;
		
	}	
}

declare module org.roylance.yadel {
	export const enum UIRequests {
		REPORT_DAGS = 0,
		DELETE_DAG = 1,
		
	}
}

declare module org.roylance.yadel {
	export const enum UIWorkerState {
		CURRENTLY_WORKING = 0,
		CURRENTLY_IDLE = 1,
		
	}
}
